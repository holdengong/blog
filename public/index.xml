<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Holden Gong</title>
    <link>https://holdengong.com/</link>
    <description>Recent content on Holden Gong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Tue, 17 Mar 2020 23:01:38 +0800</lastBuildDate>
    
	<atom:link href="https://holdengong.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AspNetCore3.1_Secutiry源码解析_1_目录</title>
      <link>https://holdengong.com/aspnetcore3.1_secutiry%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_1_%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Tue, 17 Mar 2020 23:01:38 +0800</pubDate>
      
      <guid>https://holdengong.com/aspnetcore3.1_secutiry%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_1_%E7%9B%AE%E5%BD%95/</guid>
      <description>文章目录  AspNetCore3.1_Secutiry源码解析_1_目录 AspNetCore3.1_Secutiry源码解析_2_Authentication_核心项目 AspNetCore3.1_Secutiry源码解析_3_Authentication_Cookies AspNetCore3.1_Secutiry源码解析_4_Authentication_JwtBear AspNetCore3.1_Secutiry源码解析_5_Authentication_OAuth AspNetCore3.1_Secutiry源码解析_6_Authentication_OpenIdConnect AspNetCore3.1_Secutiry源码解析_7_Authentication_其他 AspNetCore3.1_Secutiry源码解析_8_Authorization_核心项目 AspNetCore3.1_Secutiry源码解析_9_Authorization_Policy  概述 最近一直在学习研究认证授权这一块，从AspNetCore的Security解决方案，到Identity，再到OAuth2.0、OpenIdConnect协议，然后IdentityServer4，这一块的东西十分多而且复杂，可以算是DotNet里最难啃的骨头之一了。计划做个认证授权的系列，藉由分析源码来学习、记录和加深对这一块的理解。
如图是AspNetCore.Security解决方案的项目结构。
可以看到主要有5个解决方案文件夹
 Authentication：认证 Authorization：授权 CookiePolicy：Cookie策略中间件 _dependencies：依赖项目 benchmarks：测试项目  最主要的是Authentication和Authorization这两个里面的内容。
什么是Authentication， 什么是Authorization 初次接触这一块，可能会比较懵，啥玩意儿啊，俩单词长得差不多像念绕口令的。
我尝试大白话解释下。
Authentication（认证）：who are you。系统获知当前用户身份的过程就叫认证。可以类比成身份证。通常来说，在你登录的时候，系统就知道了你的身份，然后将当前用户信息加密后存储在Cookie中来维持登录态。
Authorization（授权）：are you allowed。授权就是判断你有没有权限，比如网管拿着你身份证一看，你这不行，未满十八岁，不能在我这上网。而有的黑网吧是没有这个要求的，给钱就能玩。正经网吧和黑网吧，这就是需要授权资源和匿名资源的区别。
Authentication项目简介 我们可以看到第三个文件夹叫Core，里面只有一个项目叫Microsoft.AspNetCore.Authentication，是我们使用DotNet授权框架必须引用的一个核心类库。
然后其他的Certificate、Cookies、OAuth、OpenIdConnect等这些，在DotNet里叫做Schema，可以翻译为架构。这就好比，证明身份的方式有很多种，身份证、护照、户口本都可以，同理网络世界也有各种各样的协议。最常见传统的是方式是使用Cookie，也可以使用无状态的JwtBear，现在常见的微信、QQ等扫码登录是使用的OAuth协议。
Authorization项目简介 授权就两个项目，[Microsoft.AspNetCore.Authorization.Policy],[Microsoft.AspNetCore.Authorization]。多看看源码的话，应该对Policy这个词很熟悉了，在DotNet里面属于高频词汇，意思是策略。这两个项目允许设置不同的授权策略/规则，来实现高度灵活的授权方案。</description>
    </item>
    
    <item>
      <title>AspNetCore3.1_Middleware源码解析_4_StaticFiles</title>
      <link>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_4_staticfiles/</link>
      <pubDate>Mon, 16 Mar 2020 21:59:17 +0800</pubDate>
      
      <guid>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_4_staticfiles/</guid>
      <description>概述 AspNetCore提供了StaticFiles中间件，使我们可以轻松访问静态文件。
使用方法 AspNetCore提供了三个重载方法，没有特殊需求的情况下，我们使用无参的就可以了。
//使用默认配置 app.UseStaticFiles(); //自定义静态资源相对路径 app.UseStaticFiles(&amp;#34;/MyCustomStaticFilePath&amp;#34;); //所有可以配置的选项 app.UseStaticFiles(new StaticFileOptions { //用于映射file的content-type  ContentTypeProvider = null, //ContentTypeProvider无法决定content-type时的默认content-type  DefaultContentType = null, //文件提供程序  FileProvider = new PhysicalFileProvider(&amp;#34;/&amp;#34;), //Https请求，ResponseCompression中间件启用的情况下，是否对返回值压缩  HttpsCompression = Microsoft.AspNetCore.Http.Features.HttpsCompressionMode.Compress, //委托，状态码和Headers设置完，Body写入前触发，可用于修改响应头  OnPrepareResponse = null, //映射静态资源的相对路径  RequestPath = &amp;#34;/MyStaticFiles&amp;#34;, //是否伺服未知文件类型  ServeUnknownFileTypes = false }); TO BE CONTINUE&amp;hellip;</description>
    </item>
    
    <item>
      <title>AspNetCore3.1_Middleware源码解析_3_HttpsRedirection</title>
      <link>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_3_httpsredirection/</link>
      <pubDate>Mon, 16 Mar 2020 18:20:41 +0800</pubDate>
      
      <guid>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_3_httpsredirection/</guid>
      <description>概述 上文提到3.1版本默认没有使用Hsts，但是使用了HttpsRedirection这个中间件。看名字就很好理解，https跳转，顾名思义，就是跳转到https地址。
使用场景：当用户使用http访问网站时，自动跳转到https地址。这样更加安全，也更加方便，因为不需要用户特意输入https://。
具体怎么实现的我们来看看。
app.UseHttpsRedirection(); 使用方法 跟Hsts一样，HttpsRedirection默认是不需要注入的，除非你需要修改默认配置。
services.AddHttpsRedirection(config =&amp;gt; { //https地址的端口号，默认null  config.HttpsPort = 12345; //跳转响应的状态码，默认307  config.RedirectStatusCode = 302; }); 直接使用中间件即可
app.UseHttpsRedirection(); 源码解析 源代码很简单，只有两个类：HttpsRedirectionOptions配置类，HttpsRedirectionMiddleware中间件
HttpsRedirectionOptions就只有两个配置项
/// &amp;lt;summary&amp;gt;  /// Options for the HttpsRedirection middleware  /// &amp;lt;/summary&amp;gt;  public class HttpsRedirectionOptions { /// &amp;lt;summary&amp;gt;  /// The status code used for the redirect response. The default is 307.  /// &amp;lt;/summary&amp;gt;  public int RedirectStatusCode { get; set; } = StatusCodes.</description>
    </item>
    
    <item>
      <title>AspNetCore3.1_Middleware源码解析_2_Hsts</title>
      <link>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_2_hsts/</link>
      <pubDate>Mon, 16 Mar 2020 12:40:46 +0800</pubDate>
      
      <guid>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_2_hsts/</guid>
      <description>概述 在DotNetCore2.2版本中，当你新增一个WebAPI项目，Startup.cs文件中，会有这么一行代码（3.1版本默认没有使用该中间件）。
if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.  app.UseHsts(); } 这段代码，翻译一下就是开发环境使用开发异常页面，其他环境使用Hsts中间件。这个Hsts中间件是个什么东西呢，今天来看一看。
HSTS是什么 HTTP严格传输安全协议（英语：HTTP Strict Transport Security，简称：HSTS）。
简单描述一下协议内容，就是出于安全考虑，强制客户端使用https与服务端连接。
为什么要这么做呢，比较学术和系统的论述自行查看下面的链接。我这里举个通俗的栗子。
首先我们知道http是不安全的，而https是安全的，它能保障你访问的A网站就是A，而不是什么其他的野鸡。
某一天，你去逛淘宝，你往chrome地址栏敲 taobao.com，正常情况下岁月安好，什么问题都没有。假如，这时候你接入的是公共免费wifi，而这背后有人搞鬼，或者说你的电脑已经中了病毒，它可以将你跳转到一个跟taobao一模一样的网站 (怎么做到的？比如修改你的host文件，将taobao域名指向他自己搭建的假taobao网站ip)，浏览器并不知道taobao需要使用https访问，所以无法保护你，你的钱就在你的鼠标点击下，跟随着一个个http请求流入到了黑客的账户。
那要怎么办呢，不上公共wifi行不行，行，但是防不胜防，不是根本的办法。 那我们告诉浏览器taobao需要用https访问行不行，听起来不错，那怎么告诉呢，我们来搞个协议，这个协议就是HSTS。
一句话描述HTST：当你首次使用https访问了taobao成功后，taobao会返回Strict-Transport-Security头，表明我这个网站需要使用https访问，浏览器记录下这个信息，以后taobao的请求都会使用https，因此堵住了上面案例的安全漏洞。
 https://baike.baidu.com/item/HTTP%E4%B8%A5%E6%A0%BC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/16018283?fromtitle=HSTS&amp;amp;fromid=8665782&amp;amp;fr=aladdin
  https://developer.mozilla.org/zh-CN/docs/Security/HTTP_Strict_Transport_Security
  https://tools.ietf.org/html/rfc6797
 HSTS中间件的使用 通常，我们不需要写Hsts的注入代码，因为它没有任何需要注入的服务。除非你需要修改它的默认配置。
services.AddHsts(config =&amp;gt; { //是否包含子域名，默认false  config.IncludeSubDomains = true; //有效时长，默认30天  config.MaxAge = TimeSpan.FromDays(365); }); 然后，使用中间件即可。</description>
    </item>
    
    <item>
      <title>AspNetCore3.1_Middleware源码解析_1_CORS</title>
      <link>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_1_cors/</link>
      <pubDate>Sun, 15 Mar 2020 17:26:10 +0800</pubDate>
      
      <guid>https://holdengong.com/aspnetcore3.1_middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90_1_cors/</guid>
      <description>概述 什么是跨域 在前后端分离开发方式中，跨域是我们经常会遇到的问题。所谓的跨域，就是出于安全考虑，A域名向B域名发出Ajax请求，浏览器会拒绝，抛出类似下图的错误。
JSONP JSONP不是标准跨域协议，更像是聪明程序员投机取巧的办法。这种方式的原理就是js是没有跨域限制的，你想想你引用bootstrap.js是不是网络地址放进来就可以用了。
实际上，所有src属性都不限制跨域的，比如img标签使用跨域图片是不会有问题的。
过程大体分下面四步。
 首先约定数据格式和回调函数名 A网站引用B网站的js B网站用约定好的回调函数将数据包裹起来，在A引用的js里返回 A网站在回调函数中获取数据  这个方案的优点是兼容性比较好，古老版本的IE都可以支持，毕竟只是基于js的一个技巧，并没有新的技术或协议。
缺点比较明显，只支持GET，理解起来比较别扭，调用失败不会返回http状态码，安全性存在一定问题。
CORS CORS的全称是Cross Origin Resource Sharing，翻译过来就是跨域资源共享。
跨域问题本质就是浏览器处于安全考虑，阻止了客户端跨域请求。但说到底，客户端请求安不安全还不是服务端说了算的，服务端都说我们家大米你们随便吃，浏览器还阻止，这不是碍事吗，你个物业还当自己业主啦？
但是浏览器也不能随便放行，毕竟网上冲浪的不仅有正经客人，还有小偷，真出问题了还得吐槽物业稀烂。浏览器说，服务端，这个客户端要去你家吃大米，你得告诉我你同不同意啊，服务端说我咋告诉你啊，我总不能来个人就冲着岗亭喊 I&amp;rsquo;M OK吧。浏览器说那我们搞个协议吧，整个互联网小区都按这个规范来，你们就按这个格式回复我。
这个协议就是CORS了。
下图描述了简单请求的流程。
graph LR; A(客户端)--B(不带Orgin跨域请求); B--C(浏览器拒绝); A--D(带Origin跨域请求); D--E(服务端返回白名单); E--F(白名单内); E--G(白名单外); F--H(浏览器放行); G--C    关于CORS简单请求，复杂请求，以及详细内容参考下面文章，不再赘述。 http://www.ruanyifeng.com/blog/2016/04/cors.html
 CORS的缺点就是IE10以下不支持，如果你的项目需要兼容这些浏览器的话需要注意。
怎么实现CORS CORS说白了其实就是在响应头里加东西，你可以在运维环节比如nginx加，可以在代码里加，常见的做法是中间件统一处理。AspNetCore为我们提供了CORS中间件。
AspNetCore_CORS中间件的使用 使用CORS中间件两句代码就够了,在Startup文件中
//注入CORS相关的服务，配置跨域策略 public void ConfigureServices(IServiceCollection services) { //策略1，允许所有域名跨域访问  config.AddPolicy(&amp;#34;policy1&amp;#34;, policy =&amp;gt; { policy.AllowAnyOrigin(). AllowAnyMethod(). AllowAnyOrigin(). AllowAnyMethod(); //注意：AllowAnyOrigin和AllowCredential不能同时出现，否则会报错  //AllowCredential即是否允许客户端发送cookie，基于安全原因，CORS协议规定不允许AllowOrigin为通配符的情况下设置允许发送cookie  //.AllowCredentials();  }); //策略2，仅允许特定域名、方法、请求头访问  config.</description>
    </item>
    
    <item>
      <title>构建个人博客-2-使用Webhook自动发布</title>
      <link>https://holdengong.com/%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_2_%E4%BD%BF%E7%94%A8webhook%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/</link>
      <pubDate>Sat, 14 Mar 2020 21:15:28 +0800</pubDate>
      
      <guid>https://holdengong.com/%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_2_%E4%BD%BF%E7%94%A8webhook%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83/</guid>
      <description>概述 上篇介绍了怎么利用hugo搭建个人博客。 有一个地方还是有点不方便，就是git push之后需要等半个小时才能发布。
所以我想利用github的webhook实现每次推送自动发布。
github设置钩子 所谓的webhook,就是钩子,就是github搞事情的时候就会通知你。所以你需要准备一个接口接收github的post请求。 这里我设置为接收json格式数据，仅push时通知。 编写接口 生产环境一般是使用Travis Ci或者Jenkins来实现类似功能，但这对于我来说有点重型了。所以自己写个接口简单实现下。 需求很简单，每当有代码推送的时候，拉取git并发布到blog部署目录。
我这里使用.net core实现，代码十分简单，其实就一行，执行blog.sh脚本。
再看下这个blog.sh脚本的内容，也很简单，首先拉取git内容，再拷贝到部署目录就行了。
#!/bin/bash cd /git/blog git pull cp -rf /git/blog/public/. /www/wwwroot/www.holdengong.com/ 这里有3个小坑要注意
 第一行的 #!/bin/bash 是必须的 脚本必须是ANSI编码 需要执行命令 chmod +x blog.sh 是脚本可执行  完成 大功告成。接下来可以愉快的写日志了，写完只需要签入，自动发布，爽！
 这篇博客由系统自动发布
 </description>
    </item>
    
    <item>
      <title>构建个人博客_1_使用Hugo快速成型</title>
      <link>https://holdengong.com/%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_1_%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E6%88%90%E5%9E%8B/</link>
      <pubDate>Sat, 14 Mar 2020 14:42:38 +0800</pubDate>
      
      <guid>https://holdengong.com/%E6%9E%84%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_1_%E4%BD%BF%E7%94%A8hugo%E5%BF%AB%E9%80%9F%E6%88%90%E5%9E%8B/</guid>
      <description>概述 人在武汉，病毒肆虐。
隔离久了，有点闷，闲余时间找点事情做。
建个博客吧， 内容不重要，写不写也不那么要紧，目前水平也写不出什么有深度的东西。
但是这个姿势一定要优美， 过程一定要折腾。
OK, 开干。
下载Hugo  https://github.com/gohugoio/hugo/releases
 笔者是Windows系统，下载hugo_0.67.0_Windows-64bit.zip，解压到本地后，将路径加入到环境变量。
创建站点 首先创建一个git仓库
拉取到本地
如文件夹名为blog
cd blog hugo new site . 编写正文 hugo new hello-world.md 下载主题 cd theme git clone https://github.com/spf13/hyde.git 调试 hugo server --theme=hyde --buildDrafts 然后浏览器打开 http://localhost1313 可以查看效果
发布 发布前将hello-world.md的draft字段修改为true, https://holdengong.com/ 为你网站的域名
hugo --theme=hyde -b https://holdengong.com/ 执行完后会发现生成了public文件夹及内容
部署 云服务器可以使用腾讯云的学生版  https://cloud.tencent.com/act/campus?fromSource=gwzcw.2432501.2432501.2432501&amp;amp;utm_medium=cpc&amp;amp;utm_id=gwzcw.2432501.2432501.2432501
 安装宝塔面板linux管理工具  https://www.bt.cn/
 安装git yum -y install git 拉取git仓库, e.g.仓库目录为/git/blog
宝塔新建站点 e.g.站点根路由为/www/wwwroot/www.holdengong.com
定时发布 利用linux的定时任务做一个简单的定时发布</description>
    </item>
    
  </channel>
</rss>